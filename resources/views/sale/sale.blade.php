@extends('layouts.layout')

@section('content')
    @if (session('success'))
        <x-sweet-alert icon="success" title="Oh Yeah!" text="{{ session('success') }}" confirm-button-text="Ok" />
    @endif

    @if (session('error'))
        <x-sweet-alert icon="error" title="Oops..." text="{{ session('error') }}" confirm-button-text="Ok" />
    @endif

    <div class="container-fluid py-4 px-0">
        <div class="row g-0 m-0">
            <!-- Product Table -->
            <div class="col-lg-8 col-12 px-3">
                <div class="card shadow-sm h-100 rounded-0">
                    <div class="card-body">
                        <h5 class="mb-3">‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: {{ Auth::user()->name ?? 'Guest' }}</h5>
                        <h6 class="mb-4">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {{ date('d/m/Y') }}</h6>

                        <h4 class="mb-3">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</h4>
                        <div class="mb-3">
                            <label class="form-label">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢</label>
                            <div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="priceType" id="retail"
                                        value="retail" checked onchange="updatePriceTypeForAll(this.value)">
                                    <label class="form-check-label" for="retail">‡∏õ‡∏•‡∏µ‡∏Å</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="priceType" id="wholesale"
                                        value="wholesale" onchange="updatePriceTypeForAll(this.value)">
                                    <label class="form-check-label" for="wholesale">‡∏™‡πà‡∏á</label>
                                </div>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-bordered table-hover text-center align-middle" id="productTable">
                                <thead class="table-dark">
                                    <tr>
                                        <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                                        <th>‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                                        <th>‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                                        <th>‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏°</th>
                                        <th>‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
                                        <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
                                        <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
                                        <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°</th>
                                    </tr>
                                </thead>
                                <tbody id="product-list">
                                    <!-- Products will be populated via JS -->
                                </tbody>
                            </table>
                        </div>

                    </div>
                </div>
            </div>

            <!-- Payment Section -->
            <div class="col-lg-4 col-12 px-3">
                <div class="card shadow-sm h-100 rounded-0">
                    <div class="card-body">
                        <h4 class="card-title mb-4">‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h4>
                        <h5>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h5>
                        <h2 class="text-success mb-4" id="totalAmount">0 ‡∏ö‡∏≤‡∏ó</h2>

                        <div class="mb-3">
                            <label for="cash" class="form-label">‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤ (‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î)</label>
                            <input type="number" class="form-control" id="cash"
                                placeholder="‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏≤">
                        </div>

                        <div class="mb-4">
                            <label for="change" class="form-label">‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô</label>
                            <input type="text" class="form-control" id="change" readonly
                                placeholder="‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà">
                        </div>

                        <div class="d-grid gap-2">
                            <button class="btn btn-success" onclick="payCash()">üíµ ‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</button>
                            <button class="btn btn-primary" onclick="payQRCode()">üì± ‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢ QR Code</button>
                            <button id="confirmQRButton" class="btn btn-info d-none mt-2" onclick="confirmPaymentByQR()">‚úÖ
                                ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß</button>
                        </div>

                        <div class="text-center mt-4">
                            <img id="qrImage" src="" alt="QR Code" class="img-fluid"
                                style="display:none; max-width: 200px;">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        const shopPromptPayID = "0843860015";
        let products = [];
        let totalAmount = 0;

        // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å Laravel (‡πÅ‡∏ö‡∏ö array)
        const productCatalog = @json($products);

        document.addEventListener('DOMContentLoaded', () => {
            renderProductList();
            updateTotalAmount();
            updateQRCode();

            let barcode = '';
            document.addEventListener('keydown', (e) => {
                // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î Enter (‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß)
                if (e.key === 'Enter') {
                    if (barcode.trim()) {
                        addProductByBarcode(barcode.trim()); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
                        barcode = ''; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏™‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
                    }
                } else {
                    barcode += e.key; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≤
                }
            });
        });

        let isAlertOpen = false;

        function addProductByBarcode(barcode) {
            const product = productCatalog.find(p => p.barcode === barcode);
            if (product) {
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÅ‡∏•‡∏∞ Unit ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏´‡∏°
                const existingProduct = products.find(p => p.id === product.id && p.unit === product.unit);

                if (existingProduct) {
                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                    existingProduct.qty += 1;
                } else {
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
                    products.push({
                        ...product,
                        qty: 1,
                        price: parseFloat(product.retail_price),
                        price_type: 'retail'
                    });
                }

                renderProductList();
                updateTotalAmount();
                updateQRCode();
            } else {
                if (!isAlertOpen) {
                    isAlertOpen = true;
                    Swal.fire({
                        icon: 'error',
                        title: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                        text: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î: ${barcode}`,
                        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
                        allowOutsideClick: false,
                        allowEscapeKey: false
                    }).then(() => {
                        isAlertOpen = false;
                    });
                }
            }
        }

        function renderProductList() {
            const tbody = document.getElementById('product-list');
            tbody.innerHTML = '';

            products.forEach((product, index) => {
                const row = `
    <tr>
        <td>${index + 1}</td>
        <td>${product.id}</td>
        <td>${product.name}</td>
        <td>${product.freebie}</td>
        <td>${product.unit}</td>
        <td>
            <input type="number" class="form-control form-control-sm text-center" value="${product.qty}" min="1" onchange="updateQty(${index}, this.value)">
        </td>
        <td>${(product.price).toFixed(2)} ‡∏ø</td>
         <td>${(product.qty * product.price).toFixed(2)} ‡∏ø</td>
    </tr>
`;

                tbody.insertAdjacentHTML('beforeend', row);
            });
        }

        function updateQty(index, newQty) {
            let qty = parseInt(newQty);
            if (qty > 0) {
                products[index].qty = qty;
                renderProductList();
                updateTotalAmount();
                updateQRCode();
            }
        }

        function updateTotalAmount() {
            totalAmount = products.reduce((sum, p) => sum + (p.qty * p.price), 0);
            document.getElementById('totalAmount').innerText = totalAmount.toFixed(2) + " ‡∏ö‡∏≤‡∏ó";
        }

        function updateQRCode() {
            document.getElementById('qrImage').src = `https://promptpay.io/${shopPromptPayID}/${totalAmount.toFixed(2)}`;
        }

        function payCash() {
            const cash = parseFloat(document.getElementById('cash').value);
            const changeInput = document.getElementById('change');

            if (isNaN(cash) || cash < totalAmount) {
                Swal.fire({
                    icon: 'error',
                    title: '‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠',
                    text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°',
                    confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
                });
                return;
            }

            Swal.fire({
                title: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô?',
                text: `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ${totalAmount.toFixed(2)} ‡∏ö‡∏≤‡∏ó`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
                cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
            }).then((result) => {
                if (result.isConfirmed) {
                    const change = cash - totalAmount;
                    changeInput.value = change.toFixed(2) + ' ‡∏ö‡∏≤‡∏ó';
                    playSound();
                    submitSaleData(() => {
                        playSound();
                        printReceipt(cash, change);
                        clearCart();
                        Swal.fire({
                            icon: 'success',
                            title: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
                            text: `‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: ${change.toFixed(2)} ‡∏ö‡∏≤‡∏ó`,
                            confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
                        });
                    });

                }
            });
        }

        function payQRCode() {
            document.getElementById('qrImage').style.display = 'block';
            document.getElementById('confirmQRButton').classList.remove('d-none');
            playSound();
            Swal.fire({
                icon: 'info',
                title: '‡πÅ‡∏™‡∏î‡∏á QR ‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πÅ‡∏Å‡∏ô',
                text: '‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏Å‡∏î "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß"',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
            });
        }

        function confirmPaymentByQR() {
            Swal.fire({
                icon: 'success',
                title: '‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
                confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
            }).then(() => {
                playSound();
                printReceipt(0, 0);
                clearCart();
            });
        }

        function printReceipt(cash, change) {
            const receiptWindow = window.open('', '', 'width=800,height=600');
            let productDetails = '';

            products.forEach((product, index) => {
                productDetails +=
                    `${index + 1}. ${product.name} (${product.qty} ${product.unit}) - ${product.price}‡∏ø x ${product.qty} = ${(product.qty * product.price).toFixed(2)}‡∏ø<br>`;
            });

            receiptWindow.document.write(`
            <html>
            <head><title>‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</title></head>
            <body>
                <h2>Chalini POS</h2>
                <p>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date().toLocaleString()}</p>
                <hr>
                ${productDetails}
                <hr>
                <p>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${totalAmount.toFixed(2)} ‡∏ö‡∏≤‡∏ó</p>
                ${cash ? `<p>‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏±‡∏ö‡∏°‡∏≤: ${cash.toFixed(2)} ‡∏ö‡∏≤‡∏ó</p><p>‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: ${change.toFixed(2)} ‡∏ö‡∏≤‡∏ó</p>` : ''}
                <hr>
                <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</p>
            </body>
            </html>
        `);
            receiptWindow.document.close();
            receiptWindow.print();
        }

        function clearCart() {
            products = [];
            renderProductList();
            updateTotalAmount();
            updateQRCode();
            document.getElementById('cash').value = '';
            document.getElementById('change').value = '';
            document.getElementById('qrImage').style.display = 'none';
            document.getElementById('confirmQRButton').classList.add('d-none');
        }

        function playSound() {
            const soundUrl = '/sounds/cash.mp3';
            const audio = new Audio(soundUrl);
            audio.onerror = () => console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á cash.mp3');
            audio.play();
        }

        function submitSaleData(callback) {
            fetch('{{ route('staff.update.stock') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': '{{ csrf_token() }}'
                    },
                    body: JSON.stringify({
                        products: products.map(p => ({
                            id: p.id,
                            qty: p.qty
                        }))
                    })
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        callback();
                    } else {
                        Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', data.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ', 'error');
                    }
                })
                .catch(err => {
                    console.error(err);
                    Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', 'error');
                });
        }

        function updatePriceTypeForAll(priceType) {
            products.forEach(product => {
                product.price_type = priceType;
                product.price = parseFloat(priceType === 'wholesale' ? product.wholesale_price : product
                    .retail_price);
            });
            renderProductList();
            updateTotalAmount();
            updateQRCode();
        }
    </script>
@endsection

